name: F Prime Zephyr CI
on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ '*' ]
  workflow_dispatch:
    inputs:
      force_docker_build:
        description: 'Force rebuild of Docker image'
        required: false
        default: false
        type: boolean

env:
  ZEPHYR_IMG: ghcr.io/reggiemarr/fprime-zephyr-reference

jobs:
  prepare-build:
    runs-on: ubuntu-latest
    outputs:
      fsw_changed: ${{ steps.check_changes.outputs.fsw_changed }}
      docker_changed: ${{ steps.check_changes.outputs.docker_changed }}
      fsw_img_tag: ${{ steps.set_tags.outputs.fsw_img_tag }}
      fsw_img: ${{ steps.set_tags.outputs.fsw_img }}
      build_docker: ${{ steps.check_image.outputs.build_docker }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Check code changes
        id: check_changes
        run: |
          # Determine which files changed
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            git fetch origin ${{ github.event.before }}
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          else
            # For workflow_dispatch, assume FSW files changed
            CHANGED_FILES="BaseDeployment/"
          fi

          # Check if FSW files changed
          if echo "$CHANGED_FILES" | grep -q -E "BaseDeployment/|Components/|config/|.prj|CMakeLists.txt"; then
            echo "FSW files changed"
            echo "fsw_changed=true" >> $GITHUB_OUTPUT
          else
            echo "No FSW files changed"
            echo "fsw_changed=false" >> $GITHUB_OUTPUT
          fi

          # Check if Docker-related files changed
          if echo "$CHANGED_FILES" | grep -q -E "Dockerfile|.env|docker-compose.yml|.github/workflows"; then
            echo "Docker-related files changed"
            echo "docker_changed=true" >> $GITHUB_OUTPUT
          else
            echo "No Docker-related files changed"
            echo "docker_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Set image tags
        id: set_tags
        run: |
          # Create consistent image tag from branch name
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          BRANCH_NAME=${BRANCH_NAME//\//_}
          FSW_IMG_TAG="fsw_${BRANCH_NAME}"
          FSW_IMG="${{ env.ZEPHYR_IMG }}:${FSW_IMG_TAG}"

          echo "fsw_img_tag=${FSW_IMG_TAG}" >> $GITHUB_OUTPUT
          echo "fsw_img=${FSW_IMG}" >> $GITHUB_OUTPUT

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if Docker image exists
        id: check_image
        run: |
          FSW_IMG="${{ steps.set_tags.outputs.fsw_img }}"

          # Determine if we need to build Docker
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # For manual triggers, only build if forced or image doesn't exist
            if [[ "${{ github.event.inputs.force_docker_build }}" == "true" ]]; then
              echo "Manual trigger with forced Docker build"
              echo "build_docker=true" >> $GITHUB_OUTPUT
            else
              # Check if image exists
              if docker pull ${FSW_IMG} 2>/dev/null; then
                echo "Docker image ${FSW_IMG} exists, skipping build"
                echo "build_docker=false" >> $GITHUB_OUTPUT
              else
                echo "Docker image ${FSW_IMG} doesn't exist, building"
                echo "build_docker=true" >> $GITHUB_OUTPUT
              fi
            fi
          else
            # For automated builds, build Docker if Docker files changed
            if [[ "${{ steps.check_changes.outputs.docker_changed }}" == "true" ]]; then
              echo "Docker files changed, rebuilding image"
              echo "build_docker=true" >> $GITHUB_OUTPUT
            else
              # Check if image exists
              if docker pull ${FSW_IMG} 2>/dev/null; then
                echo "Docker image ${FSW_IMG} exists, skipping build"
                echo "build_docker=false" >> $GITHUB_OUTPUT
              else
                echo "Docker image ${FSW_IMG} doesn't exist, building"
                echo "build_docker=true" >> $GITHUB_OUTPUT
              fi
            fi
          fi

  build-docker:
    needs: prepare-build
    if: needs.prepare-build.outputs.build_docker == 'true'
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        env:
          FSW_IMG: ${{ needs.prepare-build.outputs.fsw_img }}
        run: |
          echo "Building and pushing ${FSW_IMG}"
          ./run.sh build docker --clean
          docker push ${FSW_IMG}

  build-fsw:
    needs: [prepare-build, build-docker]
    if: |
      always() &&
      (needs.prepare-build.outputs.fsw_changed == 'true' || github.event_name == 'workflow_dispatch') &&
      !(needs.build-docker.result == 'failure')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Docker image
        env:
          FSW_IMG: ${{ needs.prepare-build.outputs.fsw_img }}
        run: docker pull ${FSW_IMG}

      - name: Build FSW
        env:
          FSW_IMG: ${{ needs.prepare-build.outputs.fsw_img }}
        run: |
          echo "Using image ${FSW_IMG}"
          ./run.sh build --clean

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            ./BaseDeployment/build/
